Other executable part of the whole project is Makefile.

#Targets: 
1. Preprocessor:
The preprocessor has the .c dependencies, the file .i file generated is the preprocessed file of the final executable for all the 3 different architecture. The flag used is -E

2. Assembly 
The assembly has the same .c dependencies and the output of the target
definition is .s or .asm file for all the 3 different ar
chitecture. The flag used is -S

3. Dependency:
The Dependency target has the .c dependencies and the .dep files of each main.c data.c memory.c project_1.c. The files generated by this target is .dep for the same prefix for all the 3 different architecture. The flag
is -M.

4 Build-host :
This target will build the .o files of all main.c data.c memory.c and 
project_1.c resepectively as well as the main executable. Means it will 
both compile and link.

5. Compile-all : 
This target will generate all the .o compiled files. This target on making
will not generate the linker file. Compile-all will compile all the object
files for each architecture. The prerequisite are again .c files and 
.h files 

6 build-BBB :
This target will compile and link object files of the specific architect-
-re beaglebone. 

7. build-FRDM:
Will commpile and link all the object files of the archite-
ure FRDM 

8. Project1
This target will compile and link all the object files for all the archi-
tectures defined. It will not generate the .o files for any object for a-
ny of the architecture. So there is provision of building the object fil-
es from both the above metioned targets build-xx and this target for any
of the defined architecture. The prerequisite is again .c files.

9. objdmp-
It gives the information of assembly files just by inspecting the object
files.

10 Build-lib
It generate the library archive file of the specified .c file
used ar archive maintaining program

11. Clean:
This target will clean all the intermediately generated fiels with the 
inclusion of rm -rf, where rf is the force remove of the files. 

#The command to be given when used the ifeq (conditional) loop for the bea-
glebone structure is as follows.
make ARCH="BBB"
The similar is the command for FRDM 
make ARCH="FRDM"
or we can just give the command
make build-BBB or make build-FRDM

# Each target is .phony protected and if we have been given a file with 
same name then the .phony will return the comment 'this target is update

# Created sources.mk where I have provided the path of the directory of
the .c files residing. And the variables OBJ and SRC which store .o and
.c files.

#Flags
 Wl = enable all warning msgs
 Werror = this flag will convert the warnings into error
 -g  = debugg flag
 -c   = compile flag 
 -o   = flag which executes the files

#output-
When we run the first target of the makefie the executable for each arch
-itecture is generated, when we run compile-all we are able to generate
all the object files and all the build commands the executable files of 
the given architecture is generated.

